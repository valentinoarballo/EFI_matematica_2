string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
typeof(dfDiasFuturos$fechasfuturo)
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(datos, predicciondf)
copiapredicciondf
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
Library(dplyr)
library(dplyr)
library(dplyr)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r", echo=TRUE)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
datos
predicciondf
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r", echo=TRUE)
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
datos
copiapredicciondf
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- bind_rows(datos, predicciondf)
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
datos
predicciondf
datos
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
predicciondf
datos
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
rm(list=ls())
# Importo la libreria ggplot2
library(ggplot2)
library(dplyr)
# file.choose()
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
# Los indices de los productos
# namedb <- (DB$name)
# sellerdb <- (DB$seller)
# actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
datos <- data.frame(fechasdf = fechasv, preciosdf = preciosv)
datos <- aggregate(preciosdf ~ fechasdf, data = datos, FUN = mean)
datosrbind <- datos
# Hago el grafico de regresion lineal con los datos actuales
ggplot(data=datos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion")
# Para usar cor.tests
fechas_numeric <- as.numeric(datos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(datos$preciosdf, fechas_numeric))
cat("La prediccion en base a los datos actuales")
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm((preciosdf = datos$preciosdf) ~ (fechasdf = datos$fechasdf), data = datos)
summary(model)
# Ultimo registro
max_fecha <- max(datos$fechasdf)
# Creo un data frame con 10 registros posteriores a el ultimo
dfDiasFuturos <- data.frame(fechasfuturo = seq((max_fecha+1) + 1, by = "day", length.out = 31))
predicciones <- predict(model, newdata = (fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
predicciones <- predict(model, newdata = (datos$fechasdf = dfDiasFuturos$fechasfuturo))
predicciones
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- cbind(datosrbind, predicciondf)
datosrbind
predicciondf
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondf <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
predicciondf
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- cbind(datosrbind, predicciondf)
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(datosrbind, predicciondf)
copiapredicciondf
# Grafico con las predicciones
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
