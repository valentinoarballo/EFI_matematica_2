actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
string_fecha <- fechasdb[1]
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- gsub("[\\[\\]]", "", string_fecha)
string_fecha
for (variable in string_fecha) {
print(variabel)
}
for (variable in string_fecha) {
print(variable)
}
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
for (variable in string_fecha) {
print(variable)
}
rm(list=ls())
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/dyz/itec/matematica/EFI2/elbueno.csv", TRUE, ";")
# Ejemplo de como se ve la informacion en el csv
head(DB)
# Recupero las fechas y los indices de precios de produccion
namedb <- (DB$name)
sellerdb <- (DB$seller)
actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
string_fecha <- fechasdb[1]
string_fecha
string_fecha <- gsub("\"", "", string_fecha)
string_fecha
string_fecha <- gsub("[\\[\\]]", "", string_fecha)
string_fecha
string_fecha <- gsub("[\\[\\]]", "", string_fecha)
string_fecha
string_fecha <- fechasdb[1]
string_fecha
string_fecha <- gsub("\"", "", string_fecha)
string_fecha
string_fecha <- fechasdb[1]
string_fecha <- gsub("[\\[\\]]", "", string_fecha)
string_fecha
string_fecha <- gsub("[\\[\\]\"]", "", string_fecha)
string_fecha
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha
string_fecha <- gsub("\"", "", string_fecha)
string_fecha
string_fecha
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
array_fechas <- as.Date(string_fecha, format= "%d%m")
array_fechas
rm(array_fechas)
for (variable in string_fecha) {
print(variable)
}
for (variable in string_fecha) {
variable <- as.Date(variable)
print(typeof(variable))
print(variable)
}
for (variable in string_fecha) {
variable <- as.Date(variable, format= "%d%m")
print(typeof(variable))
print(variable)
}
for (variable in string_fecha) {
variable <- as.Date(variable, "23", sep="/")
print(typeof(variable))
print(variable)
}
string_fecha <- fechasdb[1]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
for (variable in string_fecha) {
variable <- as.Date(variable, "23", sep="/")
print(typeof(variable))
print(variable)
}
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
variable <- as.Date(variable, "23", sep="-")
print(typeof(variable))
print(variable)
}
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
print(variable)
variable
variable <- as.Date(variable, "23", sep="-")
print(typeof(variable))
print(variable)
}
print(variable)
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
print(variable)
variable
variable <- as.Date(variable, "23", sep="-")
print(typeof(variable))
variable
print(variable)
}
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
variable <- as.Date(variable, "23", sep="-")
variable
}
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
variable <- as.Date(variable, "23", sep="-")
variable
}
variable
cat(variable)
for (variable in string_fecha) {
variable <- gsub("/", "-", variable)
variable <- as.Date(variable, "23", sep="-")
cat(variable)
}
cat(variable)
for (variable in string_fecha) {
cat(variable)
variable <- gsub("/", "-", variable)
variable <- as.Date(variable, "23", sep="-")
cat(variable)
}
string_fecha
class(string_fecha)
rm(list=ls())
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/dyz/itec/matematica/EFI2/elbueno.csv", TRUE, ";")
fechasdb <- (DB$json_fechas)
string_fecha <- fechasdb[1]
string_fecha
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
vectorflecha <- as.vector(string_fecha)
vectorflecha
vectorflecha <- as.Date(string_fecha, format = "%d%m")
vectorflecha
rm(list=ls())
char <- "21/1"
fecha <- as.Date(char)
fecha <- as.Date(char, format = "%d%m")
fecha
char <- "21-1"
fecha <- as.Date(char, format = "%d%m")
fecha
char <- "21-1-23"
fecha <- as.Date(char, format = "%d%m%y")
fecha
char <- "21-1-23"
fecha <- as.Date(char, format = "%dd%m%yy")
fecha
char <- "21/1"
fecha <- as.Date(char, format = "%d/%m")
fecha
rm(list=ls())
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/dyz/itec/matematica/EFI2/elbueno.csv", TRUE, ";")
# Ejemplo de como se ve la informacion en el csv
head(DB)
fechasdb <- (DB$json_fechas)
string_fecha <- fechasdb[1]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
vectorflecha <- as.vector(string_fecha)
vectorflecha <- as.Date(string_fecha, format = "%d/%m")
vectorflecha
preciosdb <- (DB$json_precios)
string_precio <- preciosdb[1]
string_precio
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio
vectorprecio <- as.vector(string_precio)
vectorprecio
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio
rm(vectorflecha)
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
vectorfecha
vectorprecio
# Recupero las fechas y los indices de precios de produccion
namedb <- (DB$name)
sellerdb <- (DB$seller)
namedb
namedb[1]
vectorfecha
vectorprecio
DateDB<-vectorfecha
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
data
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB))
# Para usar cor.tests
DateDB_numeric <- as.numeric(DateDB)
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
typeof(Price)
typeof(vectorprecio)
vectorprecio <- as.integer(vectorprecio)
vectorprecio
vectorprecio <- as.vector(string_precio)
vectorprecio
typeof(vectorprecio)
vectorprecio <- as.integer(vectorprecio)
typeof(vectorprecio)
vectorprecio <- as.integer(vectorprecio)
vectorprecio
typeof(vectorprecio)
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Para usar cor.tests
DateDB_numeric <- as.numeric(DateDB)
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
string_precio <- preciosdb[3]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
string_fecha <- fechasdb[3]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
vectorfecha
DateDB<-vectorfecha
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
data
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
DateDB<-vectorfecha
Price<-vectorprecio
DateDB
Price
vectorprecio
preciosdb[3]
preciosdb[4]
string_precio <- preciosdb[4]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
string_fecha <- fechasdb[4]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
DateDB<-vectorfecha
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
data
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Para usar cor.tests
DateDB_numeric <- as.numeric(DateDB)
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm(Price ~ DateDB, data = DB)
summary(model)
datosPredecidosEnero2024 <- data.frame(DateDB = as.Date("2024-01-01"))
datosPredecidosEnero2025 <- data.frame(DateDB = as.Date("2025-01-01"))
datosPredecidosEnero2026 <- data.frame(DateDB = as.Date("2026-01-01"))
pricePredict2024 <- predict(model, datosPredecidosEnero2024)
pricePredict2025 <- predict(model, datosPredecidosEnero2025)
pricePredict2026 <- predict(model, datosPredecidosEnero2026)
rm(list=ls())
preciosdb[5]
# Importo la libreria ggplot2
library(ggplot2)
# Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y "," porque se separan por ,
DB <- read.csv("/home/dyz/itec/matematica/EFI2/elbueno.csv", TRUE, ";")
# Ejemplo de como se ve la informacion en el csv
head(DB)
# Recupero las fechas y los indices de precios de produccion
namedb <- (DB$name)
sellerdb <- (DB$seller)
actualPricedb <- (DB$actual_price)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
preciosdb[5]
preciosdb[6]
preciosdb[7]
preciosdb[8]
string_precio <- preciosdb[4]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
string_fecha <- fechasdb[4]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
DateDB<-vectorfecha
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Para usar cor.tests
DateDB_numeric <- as.numeric(DateDB)
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm(Price ~ DateDB, data = DB)
summary(model)
preciosdb[4]
fechasdb[4]
# string_precio <- preciosdb[4]
string_precio <- "[143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,143181,156268,164081,164081,164081,164081,164081,164081]"
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
# string_fecha <- fechasdb[4]
string_fecha <- "[\"21/9\",\"22/9\",\"23/9\",\"24/9\",\"25/9\",\"26/9\",\"27/9\",\"28/9\",\"29/9\",\"30/9\",\"1/10\",\"2/10\",\"3/10\",\"4/10\",\"5/10\",\"6/10\",\"7/10\",\"8/10\",\"9/10\",\"10/10\",\"11/10\",\"12/10\",\"13/10\",\"14/10\",\"15/10\",\"16/10\"]"
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
DateDB<-vectorfecha
Price<-vectorprecio
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Para usar cor.tests
DateDB_numeric <- as.numeric(DateDB)
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
# Ajusto un modelo de regresion lineal en base a los datos
model <- lm(Price ~ DateDB, data = DB)
summary(model)
v17 <- data.frame(DateDB = as.Date("2023-10-17"))
v18 <- data.frame(DateDB = as.Date("2023-10-18"))
v19 <- data.frame(DateDB = as.Date("2023-10-19"))
v20 <- data.frame(DateDB = as.Date("2023-10-20"))
v21 <- data.frame(DateDB = as.Date("2023-10-21"))
p17 <- predict(model, v17)
p18 <- predict(model, v18)
p19 <- predict(model, v19)
p20 <- predict(model, v20)
p21 <- predict(model, v21)
p17
p18
p19
p20
p21
print(p21)
print(p21)
prediccion <- predict(model, dataframemodelo)
dataframemodelo <- data.frame(DateDB = seq(max_fecha + 1, length.out = 5))
prediccion <- predict(model, dataframemodelo)
# Modelo de prediccion
max_fecha <- max(vectorfecha)
dataframemodelo <- data.frame(DateDB = seq(max_fecha + 1, length.out = 5))
dataframemodelo <- data.frame(DateDB = seq(max_fecha + 1, by = "day", length.out = 5))
prediccion <- predict(model, dataframemodelo)
prediccion
dataframeresultante <- data.frame(DateDB = dataframemodelo$DateDB, Price = prediccion)
dataframeresultante
# Creo un data frame con los datos anteriormente recuperados
data <- data.frame(Price,DateDB)
data
dataframeresultante <- data.frame(DateDB, Price = prediccion$DateDB = dataframemodelo)
dataframeresultante <- data.frame(DateDB, Price = prediccion$DateDB = dataframemodelo)
dataframeresultante <- data.frame(Price = prediccion, DateDB = dataframemodelo$DateDB)
dataframeresultante
data
prediccionGrafico <- rbind(data, dataframeresultante)
prediccionGrafico
data
prediccionGrafico
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 0.1) +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 0.1) +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 2) +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
# Recupero las fechas y los indices de precios de produccion
namedb <- (DB$name)
sellerdb <- (DB$seller)
actualPricedb <- (DB$actual_price)
# Hago el grafico de regresion lineal
ggplot(data=data, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 0.1) +
labs(title = namedb[4],
x = "Fecha",
y = paste("Precio en la tienda ",sellerdb[4])) +
theme_light()
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Puntos de precio de produccion de hardware en estados unidos frente a el paso del tiempo",
x = "Fecha",
y = "Indice de precios de produccion") +
theme_light()
ggplot(data=prediccionGrafico, aes(x=DateDB, y=Price)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = paste("prediccion de ", namedb[4]),
x = "Fecha",
y = paste("Precio en la tienda ",sellerdb[4])) +
theme_light()
# Veo si hay corelaccion entre las variables
print(cor.test(Price, DateDB_numeric))
# Ejemplo de como se ve la informacion en el csv
head(DB)
