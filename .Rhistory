labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondfEuro <- copiapredicciondf
# SII! anda!
endpoint <- "http://api.exchangeratesapi.io/v1/"
symbols <- "ARS"
key <- Sys.getenv("API_KEY")
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
rates <- c(rates, rate)
}
rates <- c()
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
rates <- c(rates, rate)
}
cat(rates)
rates
key <- Sys.getenv("API_KEY")
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
print(rate)
rates <- c(rates, rate)
}
copiapredicciondfEuro$fechasdf
copiapredicciondfEuro
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
print(rate)
rates <- c(rates, rate)
}
rates
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
print(rate)
rates <- c(rates, rate)
}
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiapredicciondfEuro$fechasdf)
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiapredicciondfEuro$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
datos
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
copiaDatos <- datos
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
datos
datosrbind
copiaDatos <- datosrbind
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
rates <- c()
rates
cat(rates)
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
cat((length(copiaDatos$fechasdf) - i), "operaciones restantes \n")
cat(copiaDatos$fechasdf[i], " -- ")
date <- copiaDatos$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
cat(rate)
rates <- c(rates, rate)
}
cat(rates)
rates
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
fecha <- copiapredicciondf$fechasdf[i]
}
copiaDatos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
fecha <- copiapredicciondf$fechasdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
copiaDatos
copiaDatos
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
# geom_bar(stat = "identity") +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
rates <- rev(rates)
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
rates
copiaDatos
copiaDatos
max_fecha
cat("Para chequear la fuerza de la correlacion en euros")
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
cat("La prediccion en base a los datos actuales pasada a euros")
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
summary(modeleuros)
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
prediccioneseuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
copiaDatos2 <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatos2, predicciondfeuro)
copiapredicciondf
predicciondfeuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
copiaDatos2 <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatos2, predicciondfeuro)
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiaDatos2
predicciondfeuro
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1200), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(labels = comma, limits = c(0, 1200), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r")
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1100), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r")
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
copiaDatos
copiaDatos2
copiaDatosrbind <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
copiaDatos
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r", echo=TRUE)
predicciondfeuro
copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
copiapredicciondf
predicciondfeuro
copiaDatos
copiaDatosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rm(copiaDatos)
datosrbind
copiaDatos <- datosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
copiaDatos
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
copiaDatos
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
copiaDatosrbind <- copiaDatos
copiaDatosrbind <- copiaDatos
copiaDatosrbind
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
copiaDatosrbind
copiaDatos
copiaDatos
copiaDatos
summary(modeleuros)
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
copiaDatos
copiaDatosrbind
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
predicciondfeuro
prediccioneseuro
copiaDatos
copiaDatos <- copiaDatosrbind
copiaDatos
copiaDatos
rm(copiaDatos)
datosrbind
copiaDatos
rates <- rev(rates)
copiaDatos <- datosrbind
copiaDatos
rates <- rev(rates)
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rates
rm(copiaDatos)
copiaDatos <- datosrbind
copiaDatos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
precios_pesos <- copiapredicciondf$preciosdf[i]
precios_pesos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiaDatos$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rm(copiaDatos)
copiaDatos <- datosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiaDatos$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion en euros")
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
cat("La prediccion en base a los datos actuales pasada a euros")
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
summary(modeleuros)
copiaDatosrbind <- copiaDatos
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
prediccioneseuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1100), breaks = seq(0, 1100, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
DB
# Los indices de los productos
seller <- (DB$seller)
seller[1]
seller[0]
seller[1]
productname <- (DB$name)
cat("con esta base de datos generada por el webscraper podemos obtener otros datos interesantes, como la tienda web con los precios mas bajos para este producto")
cat("\n por ejemplo; en", seller[1], " venden ", productname[1], " por ", preciosdb[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
DB
precioactual <- (DB$actual_price)
cat("\n por ejemplo; en", seller[1], " venden ", productname[1], " por $", precioactual[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
cat("\n por ejemplo, en", seller[1], " venden ", productname[1], " por $", precioactual[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
