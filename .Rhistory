rates <- c(rates, rate)
}
rates
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
Sys.sleep(1)
cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
date <- copiapredicciondfEuro$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
print(rate)
rates <- c(rates, rate)
}
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiapredicciondfEuro$fechasdf)
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
for (i in 1:length(copiapredicciondfEuro$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiapredicciondfEuro$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
datos
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
copiaDatos <- datos
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
datos
datosrbind
copiaDatos <- datosrbind
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
# cat((length(copiapredicciondfEuro$fechasdf) - i), "segundos restantes \n")
print(copiaDatos$fechasdf[i])
#   date <- copiapredicciondfEuro$fechasdf[i]
#   # Construir la URL con el endpoint, la clave, la fecha y el símbolo
#   url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
#   # Hacer la petición GET a la URL y obtener el contenido como una lista
#   response <- GET(url)
#   content <- content(response, as = "parsed")
#   # Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
#   rate <- content$rates$ARS
#   print(rate)
#   rates <- c(rates, rate)
}
rates <- c()
rates
cat(rates)
for (i in 1:length(copiaDatos$fechasdf)) {
# Sys.sleep(1)
cat((length(copiaDatos$fechasdf) - i), "operaciones restantes \n")
cat(copiaDatos$fechasdf[i], " -- ")
date <- copiaDatos$fechasdf[i]
# Construir la URL con el endpoint, la clave, la fecha y el símbolo
url <- paste0(endpoint, date, "?access_key=", key, "&symbols=", symbols)
# Hacer la petición GET a la URL y obtener el contenido como una lista
response <- GET(url)
content <- content(response, as = "parsed")
# Acceder al valor de ARS dentro de la lista y guardarlo en la lista de tasas
rate <- content$rates$ARS
cat(rate)
rates <- c(rates, rate)
}
cat(rates)
rates
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
fecha <- copiapredicciondf$fechasdf[i]
}
copiaDatos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
fecha <- copiapredicciondf$fechasdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
copiaDatos
copiaDatos
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
# geom_bar(stat = "identity") +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
rates <- rev(rates)
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
rates
copiaDatos
copiaDatos
max_fecha
cat("Para chequear la fuerza de la correlacion en euros")
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
cat("La prediccion en base a los datos actuales pasada a euros")
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
summary(modeleuros)
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
prediccioneseuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = predicciones)
copiaDatos2 <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatos2, predicciondfeuro)
copiapredicciondf
predicciondfeuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
copiaDatos2 <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatos2, predicciondfeuro)
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiaDatos2
predicciondfeuro
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1200), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(labels = comma, limits = c(0, 1200), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r")
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1100), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100), expand = c(0, 0)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(labels = comma, limits = c(0, 1000), breaks = seq(0, 1000, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r")
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
copiaDatos
copiaDatos2
copiaDatosrbind <- copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
copiaDatos
source("~/itec/matematica/EFI_matematica_2/predictiveModel.r", echo=TRUE)
predicciondfeuro
copiaDatos
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
copiapredicciondf
predicciondfeuro
copiaDatos
copiaDatosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rm(copiaDatos)
datosrbind
copiaDatos <- datosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
copiaDatos
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
copiaDatos
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
copiaDatosrbind <- copiaDatos
copiaDatosrbind <- copiaDatos
copiaDatosrbind
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
copiaDatosrbind
copiaDatos
copiaDatos
copiaDatos
summary(modeleuros)
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
copiaDatos
copiaDatosrbind
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1049), breaks = seq(0, 1049, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
copiapredicciondf
predicciondfeuro
prediccioneseuro
copiaDatos
copiaDatos <- copiaDatosrbind
copiaDatos
copiaDatos
rm(copiaDatos)
datosrbind
copiaDatos
rates <- rev(rates)
copiaDatos <- datosrbind
copiaDatos
rates <- rev(rates)
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rates
rm(copiaDatos)
copiaDatos <- datosrbind
copiaDatos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiapredicciondf$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
precios_pesos <- copiapredicciondf$preciosdf[i]
precios_pesos
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiaDatos$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
rm(copiaDatos)
copiaDatos <- datosrbind
for (i in 1: length(copiaDatos$preciosdf)) {
precios_pesos <- copiaDatos$preciosdf[i]
tasa_cambio <- rates[i]
precio_en_euros <- round(precios_pesos / tasa_cambio, 2)
copiaDatos$preciosdf[i] <- precio_en_euros
}
copiaDatos
ggplot(data=copiaDatos, aes(x=fechasdf, y=preciosdf)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_point(size = 1) +
labs(title = "Regresion lineal datos actualidad",
x = "Fechas",
y = "Precios") +
theme_light()
cat("Para chequear la fuerza de la correlacion en euros")
# Para usar cor.tests
fechas_numericeuros <- as.numeric(copiaDatos$fechasdf)
# Veo si hay corelaccion entre las variables
print(cor.test(copiaDatos$preciosdf, fechas_numericeuros))
cat("La prediccion en base a los datos actuales pasada a euros")
# Ajusto un modelo de regresion lineal en base a los datos
modeleuros <- lm((preciosdf = copiaDatos$preciosdf) ~ (fechasdf = copiaDatos$fechasdf), data = copiaDatos)
summary(modeleuros)
copiaDatosrbind <- copiaDatos
prediccioneseuro <- predict(modeleuros, newdata = (copiaDatos$fechasdf = dfDiasFuturos$fechasfuturo))
prediccioneseuro
# Creo un data frame con las fechas futuras y los precios predecidos
predicciondfeuro <- data.frame(fechasdf = dfDiasFuturos$fechasfuturo, preciosdf = prediccioneseuro)
# Concatenacion del data frame original mas las predicciones
copiapredicciondf <- rbind(copiaDatosrbind, predicciondfeuro)
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
# scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1150), breaks = seq(0, 1150, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
ggplot(data=copiapredicciondf, aes(x=fechasdf, y=preciosdf)) +
geom_area(stat = "identity", fill = 4, alpha = 0.5, color = 1, lwd = 0.5, linetype = 1) +
scale_y_continuous(limits = c(0, 1100), breaks = seq(0, 1100, 100)) +
labs(title = "Prediccion de precios",
x = "Fechas",
y = "Precios ") +
theme_light()
DB
# Los indices de los productos
seller <- (DB$seller)
seller[1]
seller[0]
seller[1]
productname <- (DB$name)
cat("con esta base de datos generada por el webscraper podemos obtener otros datos interesantes, como la tienda web con los precios mas bajos para este producto")
cat("\n por ejemplo; en", seller[1], " venden ", productname[1], " por ", preciosdb[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
DB
precioactual <- (DB$actual_price)
cat("\n por ejemplo; en", seller[1], " venden ", productname[1], " por $", precioactual[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
cat("\n por ejemplo, en", seller[1], " venden ", productname[1], " por $", precioactual[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
rm(list=ls())
# Importacio de librerias
library(ggplot2)
library(dplyr)
library(scales)
cat("Asignacion de los datos en una variable, TRUE por que la primer linea son los titulos y ';' porque se separan por ;")
file.choose()
DB <- read.csv("/home/valen/itec/matematica/EFI_matematica_2/elbueno.csv", TRUE, ";")
cat("Los indices de los productos, cada fila representara un producto de una tienda individual, se recuperan entre 40 y 60 elementos dependiendo de el producto que se busque, cada producto ademas tiene un historial de el precio que tubo en los ultimos 31 dias")
seller <- (DB$seller)
productname <- (DB$name)
fechasdb <- (DB$json_fechas)
preciosdb <- (DB$json_precios)
precioactual <- (DB$actual_price)
cat("con esta base de datos generada por el webscraper podemos obtener otros datos interesantes, como la tienda web con los precios mas bajos para este producto")
cat("\n por ejemplo, en", seller[1], " venden ", productname[1], " por $", precioactual[1], "siendo la tienda mas barata (que encontro el web scrapper) con este producto")
cat("Creo array vacios para despues agregar todos los datos con los que voy a trabajar, vectores paralelos con fecha")
fechasv <- c()
preciosv <- c()
for (x in 1:length(fechasdb)) {
string_fecha <- fechasdb[x]
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha <- gsub("\"", "", string_fecha)
string_fecha <- strsplit(string_fecha, ",")[[1]]
vectorfecha <- as.vector(string_fecha)
vectorfecha <- as.Date(string_fecha, format = "%d/%m")
string_precio <- preciosdb[x]
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio <- strsplit(string_precio, ",")[[1]]
vectorprecio <- as.vector(string_precio)
vectorprecio <- as.integer(vectorprecio)
fechasv <- append(fechasv, vectorfecha)
preciosv <- append(preciosv, vectorprecio)
}
preciosv
fechasv
x in 1:length(fechasdb)
# Toda esta seccion basicamente lo que hace es pasar cada elemento fechasdb a un formato en el que pueda trabajarlo con R
# Esto es necesario, porq desde JavaScript a los Arrays de historiales fechas[] y precios[] los transformo con una funcion llamada JSON_jsonify(), esto me permite subirlo mas facilmente con sequelize (la libreria para hacer la conexion js <-> sql) a la base de datos
# El inconveniente esta en que tengo que hacer estas lineas extra en R, pero me ahorra mas pasos por el otro lado del programa
string_fecha <- fechasdb[x]
string_fecha
# > string_fecha  "[\"21/9\",\"22/9\",\"23/9\",\"24/9\",]"
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha
# Toda esta seccion basicamente lo que hace es pasar cada elemento fechasdb a un formato en el que pueda trabajarlo con R
# Esto es necesario, porq desde JavaScript a los Arrays de historiales fechas[] y precios[] los transformo con una funcion llamada JSON_jsonify(), esto me permite subirlo mas facilmente con sequelize (la libreria para hacer la conexion js <-> sql) a la base de datos
# El inconveniente esta en que tengo que hacer estas lineas extra en R, pero me ahorra mas pasos por el otro lado del programa
string_fecha <- fechasdb[x]
string_fecha
# > string_fecha  "[\"21/9\",\"22/9\",\"23/9\",\"24/9\",]"
string_fecha <- substring(string_fecha, 2, nchar(string_fecha) -1)
string_fecha
# > string_fecha  "\"21/9\",\"22/9\",\"23/9\",\"24/9\",···"
string_fecha <- gsub("\"", "", string_fecha)
string_fecha
# > string_fecha "21/9,22/9,23/9,24/9,···"
string_fecha <- strsplit(string_fecha, ",")[[1]]
string_fecha
vectorfecha <- as.vector(string_fecha)
vectorfecha
string_precio <- preciosdb[x]
string_precio
string_precio <- substring(string_precio, 2, nchar(string_precio) -1)
string_precio
string_precio <- strsplit(string_precio, ",")[[1]]
string_precio
